import 'dart:io';
import 'dart:convert';
import 'dart:typed_data';
import 'package:flutter/material.dart';
import 'package:extended_image/extended_image.dart';
import 'package:path_provider/path_provider.dart';
import 'package:google_mlkit_text_recognition/google_mlkit_text_recognition.dart';
import 'package:http/http.dart' as http;
import 'package:firebase_auth/firebase_auth.dart';
import 'package:cloud_firestore/cloud_firestore.dart';
import 'package:get/get.dart'; // ‚úÖ ‡πÉ‡∏ä‡πâ GetX ‡∏™‡∏≥‡∏´‡∏£‡∏±‡∏ö Navigation & Snackbar

class CropAndOcrPage extends StatefulWidget {
  final File imageFile;
  const CropAndOcrPage({Key? key, required this.imageFile}) : super(key: key);

  @override
  State<CropAndOcrPage> createState() => _CropAndOcrPageState();
}

class _CropAndOcrPageState extends State<CropAndOcrPage> {
  final GlobalKey<ExtendedImageEditorState> editorKey = GlobalKey<ExtendedImageEditorState>();

  final String _imgurClientId = "ed6895b5f1bf3d7"; // üî• ‡πÉ‡∏™‡πà Client ID ‡∏Ç‡∏≠‡∏á‡∏Ñ‡∏∏‡∏ì

  bool _isProcessing = false; // ‚úÖ ‡∏™‡∏ñ‡∏≤‡∏ô‡∏∞‡πÇ‡∏´‡∏•‡∏î
  String _extractedText = ""; // ‚úÖ ‡πÄ‡∏Å‡πá‡∏ö‡∏Ç‡πâ‡∏≠‡∏Ñ‡∏ß‡∏≤‡∏° OCR

  /// ‚úÖ **Crop + OCR + Upload ID Card ‡πÑ‡∏õ‡∏ó‡∏µ‡πà Firestore**
  Future<void> _cropAndUploadIdCard() async {
    setState(() => _isProcessing = true); // ‚úÖ ‡πÄ‡∏£‡∏¥‡πà‡∏°‡πÇ‡∏´‡∏•‡∏î (‡πÅ‡∏™‡∏î‡∏á overlay)

    final state = editorKey.currentState;
    if (state == null) {
      setState(() => _isProcessing = false);
      return;
    }

    // **‡∏î‡∏∂‡∏á‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•‡∏†‡∏≤‡∏û‡∏ó‡∏µ‡πà‡∏ñ‡∏π‡∏Å Crop**
    final Uint8List? croppedData = state.rawImageData;
    if (croppedData == null) {
      setState(() => _isProcessing = false);
      return;
    }

    // **‡∏™‡∏£‡πâ‡∏≤‡∏á‡πÑ‡∏ü‡∏•‡πå‡∏ä‡∏±‡πà‡∏ß‡∏Ñ‡∏£‡∏≤‡∏ß‡∏à‡∏≤‡∏Å croppedData**
    final tempDir = await getTemporaryDirectory();
    final tempFile = await File('${tempDir.path}/cropped_id_card.jpg')
        .writeAsBytes(croppedData);

    // **OCR ‡∏î‡πâ‡∏ß‡∏¢ ML Kit**
    final inputImage = InputImage.fromFilePath(tempFile.path);
    final textRecognizer = TextRecognizer();
    final recognizedText = await textRecognizer.processImage(inputImage);
    await textRecognizer.close();

    _extractedText = recognizedText.text; // ‚úÖ ‡∏ö‡∏±‡∏ô‡∏ó‡∏∂‡∏Å‡∏Ç‡πâ‡∏≠‡∏Ñ‡∏ß‡∏≤‡∏° OCR

    // **‡∏≠‡∏±‡∏õ‡πÇ‡∏´‡∏•‡∏î‡∏£‡∏π‡∏õ‡πÑ‡∏õ Imgur**
    try {
      final imgurResult = await _uploadImageToImgur(tempFile);
      final downloadUrl = imgurResult['link'];
      final deleteHash = imgurResult['deletehash'];

      // **‡∏≠‡∏±‡∏õ‡πÄ‡∏î‡∏ï Firestore**
      final user = FirebaseAuth.instance.currentUser;
      if (user != null) {
        await FirebaseFirestore.instance
            .collection('users')
            .doc(user.uid)
            .set({
              'image': {
                'id_card': downloadUrl, // ‚úÖ ‡∏ö‡∏±‡∏ô‡∏ó‡∏∂‡∏Å URL ‡∏Ç‡∏≠‡∏á ID Card
                'deletehash_id_card': deleteHash, // ‚úÖ ‡∏ö‡∏±‡∏ô‡∏ó‡∏∂‡∏Å hash ‡∏™‡∏≥‡∏´‡∏£‡∏±‡∏ö‡∏•‡∏ö‡∏£‡∏π‡∏õ
              },
              'address': {
                'moreinfo': _extractedText, // ‚úÖ ‡πÄ‡∏û‡∏¥‡πà‡∏°‡∏Ç‡πâ‡∏≠‡∏Ñ‡∏ß‡∏≤‡∏° OCR ‡∏•‡∏á‡πÑ‡∏õ‡πÉ‡∏ô‡∏£‡∏≤‡∏¢‡∏•‡∏∞‡πÄ‡∏≠‡∏µ‡∏¢‡∏î‡πÄ‡∏û‡∏¥‡πà‡∏°‡πÄ‡∏ï‡∏¥‡∏°
              }
            }, SetOptions(merge: true)); // ‚úÖ merge: true ‡πÑ‡∏°‡πà‡∏•‡∏ö‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•‡∏≠‡∏∑‡πà‡∏ô
      }
      
      // ‚úÖ ‡πÅ‡∏™‡∏î‡∏á‡∏Ç‡πâ‡∏≠‡∏Ñ‡∏ß‡∏≤‡∏°‡∏™‡∏≥‡πÄ‡∏£‡πá‡∏à
      if (!mounted) return;
      Get.snackbar(
        "‡∏™‡∏≥‡πÄ‡∏£‡πá‡∏à", 
        "‡∏ó‡∏≥‡∏Å‡∏≤‡∏£ crop ‡∏£‡∏π‡∏õ‡∏†‡∏≤‡∏û‡∏™‡∏≥‡πÄ‡∏£‡πá‡∏à ‡πÅ‡∏•‡∏∞‡πÄ‡∏û‡∏¥‡πà‡∏°‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•‡∏ó‡∏µ‡πà‡∏≠‡∏¢‡∏π‡πà",
        snackPosition: SnackPosition.BOTTOM,
        backgroundColor: Colors.green,
        colorText: Colors.white,
      );

      // ‚úÖ ‡πÑ‡∏õ‡∏´‡∏ô‡πâ‡∏≤ ProfileLessor
      Future.delayed(const Duration(seconds: 2), () {
        if (mounted) Get.offNamed('/profileLessor');
      });

    } catch (e) {
      debugPrint("‡πÄ‡∏Å‡∏¥‡∏î‡∏Ç‡πâ‡∏≠‡∏ú‡∏¥‡∏î‡∏û‡∏•‡∏≤‡∏î‡πÉ‡∏ô‡∏Å‡∏≤‡∏£‡∏≠‡∏±‡∏õ‡πÇ‡∏´‡∏•‡∏î‡∏£‡∏π‡∏õ‡∏´‡∏£‡∏∑‡∏≠‡∏ö‡∏±‡∏ô‡∏ó‡∏∂‡∏Å‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•: $e");
    }

    setState(() => _isProcessing = false); // ‚úÖ ‡∏à‡∏ö‡πÇ‡∏´‡∏•‡∏î
  }

  /// üìå **‡∏≠‡∏±‡∏õ‡πÇ‡∏´‡∏•‡∏î‡∏£‡∏π‡∏õ‡πÑ‡∏õ Imgur**
  Future<Map<String, dynamic>> _uploadImageToImgur(File file) async {
    final bytes = await file.readAsBytes();
    final base64Image = base64Encode(bytes);

    final response = await http.post(
      Uri.parse('https://api.imgur.com/3/image'),
      headers: {'Authorization': 'Client-ID $_imgurClientId'},
      body: {'image': base64Image, 'type': 'base64'},
    );

    final data = jsonDecode(response.body);
    if (data['success'] == true) {
      return {'link': data['data']['link'], 'deletehash': data['data']['deletehash']};
    } else {
      throw Exception("‡∏≠‡∏±‡∏õ‡πÇ‡∏´‡∏•‡∏î‡∏£‡∏π‡∏õ‡πÑ‡∏õ Imgur ‡πÑ‡∏°‡πà‡∏™‡∏≥‡πÄ‡∏£‡πá‡∏à: ${data['data']['error']}");
    }
  }

  @override
  Widget build(BuildContext context) {
    return Scaffold(
      appBar: AppBar(
        title: const Text("Crop & Upload ID Card"),
        backgroundColor: const Color(0xFF00377E),
      ),
      body: Stack(
        children: [
          ExtendedImage.file(
            widget.imageFile,
            fit: BoxFit.contain,
            mode: ExtendedImageMode.editor,
            extendedImageEditorKey: editorKey,
            cacheRawData: true, // ‚úÖ ‡∏ï‡πâ‡∏≠‡∏á‡πÄ‡∏û‡∏¥‡πà‡∏°‡πÄ‡∏û‡∏∑‡πà‡∏≠‡πÉ‡∏´‡πâ Crop ‡πÑ‡∏î‡πâ
            initEditorConfigHandler: (state) {
              return EditorConfig(
                maxScale: 8.0,
                cropRectPadding: const EdgeInsets.all(20.0),
                hitTestSize: 20.0,
              );
            },
          ),
          if (_isProcessing) // ‚úÖ Overlay Loading
            Container(
              color: Colors.black.withOpacity(0.5),
              child: const Center(
                child: CircularProgressIndicator(color: Colors.white),
              ),
            ),
        ],
      ),
      floatingActionButton: FloatingActionButton(
        onPressed: _cropAndUploadIdCard, // ‚úÖ Crop & Upload ID Card
        child: const Icon(Icons.upload),
        tooltip: "Crop & Upload ID Card",
      ),
    );
  }
}
